
TIMER1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b1  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000074  00000000  00000000  0000023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000fd  00000000  00000000  000002b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000150  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <T1delay>:
}

void T1delay()
{
//	TCCR1A = 0X00;					/* Timer1, normal mode,  */
	TCCR1B = (1<<CS12) | (1<<CS10);	/* 1024 prescalar */
  6c:	85 e0       	ldi	r24, 0x05	; 5
  6e:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 10;
  70:	8a e0       	ldi	r24, 0x0A	; 10
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	9b bd       	out	0x2b, r25	; 43
  76:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;						/* Load TCNT1, count for 10ms */
  78:	1d bc       	out	0x2d, r1	; 45
  7a:	1c bc       	out	0x2c, r1	; 44
	while((TIFR & 0x10)==0);		/* Wait for OCF1A to roll over */
  7c:	08 b6       	in	r0, 0x38	; 56
  7e:	04 fe       	sbrs	r0, 4
  80:	fd cf       	rjmp	.-6      	; 0x7c <T1delay+0x10>
//	TCCR1A = 0;
	TCNT1 = 0;						/* Load TCNT1, count for 10ms */
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44
	TIFR |= 0x04;					/* Clear OCF1A flag */
  86:	88 b7       	in	r24, 0x38	; 56
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	88 bf       	out	0x38, r24	; 56
  8c:	08 95       	ret

0000008e <main>:

void T1delay();

int main(void)
{
	DDRB	=	0xFF;				/* PORTB as output */
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	87 bb       	out	0x17, r24	; 23
	PORTB	=	0x00;
  92:	18 ba       	out	0x18, r1	; 24

	while(1)  						/* Repeat forever */
	{
		PORTB	=	~PORTB;
  94:	88 b3       	in	r24, 0x18	; 24
  96:	80 95       	com	r24
  98:	88 bb       	out	0x18, r24	; 24
		T1delay();
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <T1delay>
	}
  9e:	fa cf       	rjmp	.-12     	; 0x94 <main+0x6>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
